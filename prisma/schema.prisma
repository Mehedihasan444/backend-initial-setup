generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  name               String
  password           String
  role               Role       @default(CUSTOMER)
  status             UserStatus @default(ACTIVE)
  needPasswordChange Boolean    @default(true)
  passwordChangedAt  DateTime?
  isDeleted          Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  customer           Customer?
  vendor             Vendor?

  @@map("users")
}

model Admin {
  id             String           @id @default(uuid())
  name           String
  email          String           @unique
  profilePhoto   String           @default("https://cdn-icons-png.flaticon.com/512/3607/3607444.png")
  phone          String           @default("")
  address        String           @default("")
  user           User             @relation(fields: [email], references: [email], onDelete: Cascade)
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  AdminDashboard AdminDashboard[]

  @@map("admins")
}

model Customer {
  id                String              @id @default(uuid())
  name              String
  email             String              @unique
  profilePhoto      String              @default("https://cdn-icons-png.flaticon.com/512/3607/3607444.png")
  user              User                @relation(fields: [email], references: [email], onDelete: Cascade)
  phone             String?             @default("")
  address           String?             @default("")
  isDeleted         Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  order             Order[]
  review            Review[]
  cart              Cart[]
  follow            Follow[]
  CustomerDashboard CustomerDashboard[]

  @@map("customers")
}

model Vendor {
  id              String            @id @default(uuid())
  name            String
  email           String            @unique
  profilePhoto    String            @default("https://cdn-icons-png.flaticon.com/512/3607/3607444.png")
  phone           String            @default("")
  user            User              @relation(fields: [email], references: [email], onDelete: Cascade)
  isDeleted       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  shop            Shop[]
  VendorDashboard VendorDashboard[]

  @@map("vendors")
}

model CustomerDashboard {
  id            String   @id @default(uuid())
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  totalOrders   Int
  totalSpent    Float
  totalSaved    Float
  totalReviews  Int
  totalProducts Int
  totalFollows  Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("customerDashboards")
}

model VendorDashboard {
  id              String   @id @default(uuid())
  vendorId        String
  vendor          Vendor   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  totalOrders     Int
  totalEarnings   Float
  totalProducts   Int
  totalCategories Int
  totalReviews    Int
  averageRating   Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("vendorDashboards")
}

model AdminDashboard {
  id              String   @id @default(uuid())
  adminId         String
  admin           Admin    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  totalUsers      Int
  totalVendors    Int
  totalCustomers  Int
  totalOrders     Int
  totalRevenue    Float
  totalProducts   Int
  totalCategories Int
  totalShops      Int
  totalReviews    Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("adminDashboards")
}

model Shop {
  id          String     @id @default(uuid())
  name        String
  description String
  logo        String     @default("https://thumbs.dreamstime.com/b/online-shop-vector-logo-business-online-shop-vector-logo-business-illustration-design-139333744.jpg")
  banner      String     @default("https://t3.ftcdn.net/jpg/03/65/52/86/360_F_365528663_miV08QzGGVLqhRRQVQ4B9C9PtoTRJiSv.jpg")
  status      ShopStatus @default(ACTIVE)
  isActive    Boolean    @default(true)
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  vendorId    String
  vendor      Vendor     @relation(fields: [vendorId], references: [id])
  products    Product[]
  followers   Follow[]
  reviews     Review[]
  order       Order[]
  coupon      Coupon[]

  @@map("shops")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  image       String?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  images      String[]
  discount    Float      @default(0)
  quantity    Int
  rating      Float      @default(0)
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  flashSaleId String?
  flashSale   FlashSale? @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)
  shopId      String
  shop        Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  cartItems   CartItem[]
  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model Cart {
  id         String     @id @default(uuid())
  customerId String
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("carts")
}

model Follow {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  shopId     String
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("follows")
}

model Order {
  id          String      @id @default(uuid())
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  shopId      String
  shop        Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  quantity    Int
  totalAmount Float
  discount    Float       @default(0)
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  couponItem  CouponItem?

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orderItems")
}

model Coupon {
  id         String       @id @default(uuid())
  shopId     String
  Shop       Shop         @relation(fields: [shopId], references: [id], onDelete: Cascade)
  isDeleted  Boolean      @default(false)
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  couponItem CouponItem[]

  @@map("coupons")
}

model CouponItem {
  id         String   @id @default(uuid())
  discount   Float
  expiryDate DateTime
  couponId   String
  coupon     Coupon   @relation(fields: [couponId], references: [id], onDelete: Cascade)
  orderId    String?  @unique
  order      Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  code       String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("couponItems")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartItems")
}

model FlashSale {
  id            String    @id @default(uuid())
  name          String
  description   String
  image         String
  discount      Float
  startDateTime DateTime
  endDateTime   DateTime
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Product       Product[]

  @@map("flashSales")
}

model Review {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating     Float
  comment    String
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId     String

  @@map("reviews")
}

model BecomeVendorRequest {
  id        String                    @id @default(uuid())
  name      String
  email     String
  phone     String
  address   String
  reason    String
  status    BecomeVendorRequestStatus @default(PENDING)
  isDeleted Boolean                   @default(false)
  createdAt DateTime                  @default(now())
  updatedAt DateTime                  @updatedAt

  @@map("becomeVendorRequests")
}

enum Role {
  ADMIN
  SUPER_ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
  SUSPENDED
}

enum OrderStatus {
  CONFIRMED
  DELIVERED
  CANCELLED
  SHIPPED
  PENDING
}

enum BecomeVendorRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ShopStatus {
  ACTIVE
  RESTRICTED
  DELETED
  SUSPENDED
}
