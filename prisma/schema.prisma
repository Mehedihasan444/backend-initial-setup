generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  name               String
  password           String
  role               Role       @default(CUSTOMER)
  status             UserStatus @default(ACTIVE)
  needPasswordChange Boolean    @default(true)
  passwordChangedAt  DateTime?
  isDeleted          Boolean    @default(false)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  customer           Customer?
  vendor             Vendor?

  @@map("users")
}

model Vendor {
  id          String   @id @default(uuid())
  name        String
  shopName    String
  shopLogo    String
  description String
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDeleted   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Shop        Shop[]

  @@map("vendors")
}

model Shop {
  id          String     @id @default(uuid())
  name        String
  description String
  logo        String
  banner      String?
  vendorId    String     @unique
  status      ShopStatus @default(PENDING)
  isActive    Boolean    @default(true)
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  vendor      Vendor     @relation(fields: [vendorId], references: [id])
  categories  Category[]
  products    Product[]
  followers   Follow[]
  reviews     Review[]
  Order       Order[]

  @@map("shops")
}

model Admin {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("admins")
}

model Customer {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone     String?  @default("")
  address   String?  @default("")
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order[]
  Review    Review[]
  Cart      Cart[]
  Follow    Follow[]

  @@map("customers")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String
  image       String?
  isDeleted   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
  Shop        Shop?     @relation(fields: [shopId], references: [id])
  shopId      String?

  @@map("categories")
}

model Product {
  id          String     @id @default(uuid())
  name        String
  description String
  price       Float
  images      String[]
  discount    Float
  quantity    Int
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  flashSaleId String
  flashSale   FlashSale  @relation(fields: [flashSaleId], references: [id], onDelete: Cascade)
  shopId      String
  shop        Shop       @relation(fields: [shopId], references: [id], onDelete: Cascade)
  isDeleted   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  cartItems   CartItem[]

  orderItems OrderItem[]
  reviews    Review[]

  @@map("products")
}

model Cart {
  id         String     @id @default(uuid())
  customerId String
  customer   Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  cartItems  CartItem[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("carts")
}

model Follow {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  shopId     String
  shop       Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("follows")
}

model Order {
  id          String      @id @default(uuid())
  customerId  String
  customer    Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
  shopId      String
  shop        Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  quantity    Int
  totalAmount Float
  discount    Float       @default(0)
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  isDeleted   Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
  coupons     Coupon[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orderItems")
}

model Coupon {
  id         String   @id @default(uuid())
  code       String   @unique
  discount   Float
  expiryDate DateTime
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("coupons")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartItems")
}

model FlashSale {
  id            String    @id @default(uuid())
  name          String
  description   String
  image         String
  discount      Float
  startDateTime DateTime
  endDateTime   DateTime
  isDeleted     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Product       Product[]

  @@map("flashSales")
}

model Review {
  id         String   @id @default(uuid())
  customerId String
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating     Float
  comment    String
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Shop       Shop?    @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId     String?

  @@map("reviews")
}

enum Role {
  ADMIN
  SUPER_ADMIN
  VENDOR
  CUSTOMER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
  SUSPENDED
}

enum OrderStatus {
  CONFIRMED
  DELIVERED
  CANCELLED
  SHIPPED
  PENDING
}

enum ShopStatus {
  PENDING
  APPROVED
  REJECTED
}
